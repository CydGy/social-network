var http = require('http');
var crypto = require('crypto');
var querystring = require('querystring');

var CONST = require('CONST');
var ObjectID = require('mongodb').ObjectID;
var converter = require('converter');
var valid = require('valid');



exports.redirect_login = function (res) {

  // 302 Found
  res.writeHead(302, { "Location": '/login' });
  res.end();

};

exports.redirect_back = function (req, res) {

  // 303 See Other
  res.writeHead(303, { "Location": req.headers.referer });
  res.end();

};

exports.respondError = function (res, code, message) {

  var body = code + ' ' + http.STATUS_CODES[code] + (message && ' - ' + message || '');

  res.writeHead(code, { "Content-Type": 'text/plain; charset=UTF-8' });
  res.end(body);

};

exports.reserr = function (res, err, statusCode, message) {

  if (!statusCode) statusCode = 500;

  var body = statusCode + ' ' + http.STATUS_CODES[statusCode] + (message && '\n\n' + message || '');

  res.writeHead(statusCode, {"Content-Type": 'text/plain; charset=UTF-8'});
  res.end(body);

  if (err && statusCode === 500)
    console.error(err.stack);

};


/**
 * Getters
 */

/**
 * Password
 */

exports.getCryptedPassword = function (password, key) {

  return crypto.createHmac('sha256', key).update(password).digest('hex');

};



/**
 * Random
 */

exports.getRandomInt = function (min, max) {

  return Math.floor(Math.random() * (max - min + 1)) + min;

};


exports.getRandomCode = function (length) {
	
	var code = '';
	var string = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz'
		, stringLength = string.length;
		
	for (var i = 0, rNum; i < length; i++) {
		rNum = Math.floor( Math.random() * stringLength );
		code += string.substring(rNum, rNum + 1);
	}
	
	return code;
	
};


/**
 * Time
 */

exports.getRemainingTime = function (ts) {

  ts = typeof ts === 'string' && parseInt(ts, 10) || ts;
  var tsn = Date.now();
  var remainingTs = ts - tsn;
  if (remainingTs <= 1000) return ' 1 second';

  var remainingTime = converter.ts( remainingTs );

  var strMinutes = '', strSeconds = '', string = '';
  if (remainingTime.minutes) strMinutes = remainingTime.minutes + ' minute' + (remainingTime.minutes > 1 && 's' || '');
  if (remainingTime.seconds) strSeconds = remainingTime.seconds + ' second' + (remainingTime.seconds > 1 && 's' || '');
  if (strMinutes && strSeconds) string = strMinutes + ' and ' + strSeconds;
  else string = strMinutes || strSeconds;

  return string;

};


/**
 * Username
 */

exports.isReservedUsername = function (username) {

  return !! ~ CONST.RESERVED_PATHNAMES.indexOf(username.toLowerCase());

};

// getMongoDBRegexNoCase ? uhhh
exports.usernameRegNoCase = function (username) {

  return { $regex: new RegExp('^' + username + '$', 'i') };

};

exports.isSameUsername = function (username1, username2) {

  return username1.toLowerCase() === username2.toLowerCase();

};


/**
 * Documents
 */

exports.getValues = function (array, propertie) {

  var arr = [];

  for (var i = 0, c = array.length; i < c; i++) {

    arr.push(array[i][propertie]);

  }

  return arr;

};


// TODO maybe it is more efficient, maintainable with a array.filter, array.map ...
// TODO can put a lot of array, not only 2.
exports.associateByIds = function (array1, propertie1, array2, propertie2, name1, name2) {

  var arr = [], obj;
  var i, j, c = array1.length, k = array2.length;
  var id1HexString, ids2HexString = [];

  for ( j = 0 ; j < k ; j++ ) {

    ids2HexString.push(array2[j][propertie2].toHexString());

  }

  for ( i = 0 ; i < c ; i++ ) {

    id1 = array1[i][propertie1].toHexString();

    for ( j = 0 ; j < k ; j++ ) {

      if (id1 === ids2HexString[j]) {

        // TODO optimize: remove array2[j] and update length
        // does it worth it? ... uhhh I think no!
        // benchmarks!
        // NO! because if you need for other? example 10 comments from 1 user.

        obj = {};
        obj[name1] = array1[i];
        obj[name2] = array2[j];
        arr.push(obj);
        break;

      }

    }

  }

  return arr;

};


exports.getJudged = function (judgments_docs, userId) {

  for (var i = 0, c = judgments_docs.length; i < c; i++) {

    if (judgments_docs[i].user_id.toHexString() === userId) {
      return judgments_docs[i].liked_photo_id && 'liked' || 'disliked';
    }

  }

};


exports.getLang = function (req) {

  // TODO parse one time, when get request
  var cookies = querystring.parse(req.headers.cookie, '; ', '=');

  if (valid.lang(cookies.lang)) {

    return cookies.lang;

  } else {

    if (/^en/.test(req.headers['accept-language'])) return 'en';
    if (/^fr/.test(req.headers['accept-language'])) return 'fr';

  }

  return 'en';

};



exports.getPhotoPath = function (_id) {

  var id = _id.toHexString();

  var dir1 = id.slice(-1) + '/'
    , dir2 = id.slice(-2, -1) + '/'
    , dir3 = id + '/';

  return dir1 + dir2 + dir3;

};
