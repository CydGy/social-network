/*

TODO:

  - There is a lot of improvment about security, take a look at Mozilla's docs.

  - To make a complete module for github.
  - To write this module with MongoDB and Redis. To determine which is the best.
  - To master Date Object!
  - To use HTTPS
  - To use also DOM Storage


To check:

  - Session hijacking
    - session prediction:
    - session 

  - One client per session:
    No, because client use different socket for requests.
    Anyway, it can be cool to be connected on the same account with someone.

  - Session cookie loop:

  - XSS
  - CRSF

---------------------------


Return:

  error
  cookies

*/


var querystring = require('querystring');
var mongo = require('mongo');
var ObjectID = require('mongodb').ObjectID;
var basic = require('basic');
var valid = require('valid');
var sockets = require('sockets');


// user_id > ObjectID
// userId > String

/**
 * Create (sign in)
 */

exports.create = function (options, callback) {

  var session_doc = {

    "user_id"             : options.user_doc._id,
    "code"                : basic.getRandomCode(20), // good rdm...
    "authenticity_token"  : basic.getRandomCode(25), // good rdm...
    "created"             : new Date()

  };

  mongo.main(function (err, collections) {
    if (err) return callback(err);

    collections.sessions.findAndModify({ "user_id": session_doc.user_id }, [['_id', 1]], session_doc, { upsert: true, new: true }, function (err, session_doc) {
      if (err) return callback(err);

      options.req.connection.user_id = session_doc.user_id;
      options.req.connection.userId = (session_doc.user_id).toHexString();
      options.req.connection.authenticity_token = session_doc.authenticity_token;

      // path     = defaults
      // domain   = defaults
      // max-age  = one year
      // expires  = use max-age
      // HTTPonly = when HTTP yes
      // secure   = when HTTPS

      var attributes = ( options.remember && '; max-age=' + (60 * 60 * 24 * 365) || '' )  // for a year
                     + '; HttpOnly';

      var cookies = [
        'sid=' + encodeURIComponent(session_doc._id) + attributes,
        'scode=' + encodeURIComponent(session_doc.code) + attributes
      ];

      callback(null, cookies);

    });
    
  });

};


/**
 * Open
 */

exports.open = function (req, callback) {

  var cookies = querystring.parse(req.headers.cookie, '; ', '=');
  req.cookies = cookies; // save cookies. TODO the same for create()

  if (req.connection.user_id) return callback(null, true);

  if ( !valid.id(cookies.sid) || !valid.code(cookies.scode) ) return callback(null, false);

  mongo.main(function (err, collections) {
    if (err) return callback(err);

    collections.sessions.findOne({ "_id": new ObjectID(cookies.sid), "code": cookies.scode }, function (err, doc) {
      if (err) return callback(err);
      if (doc) {
        
        req.connection.user_id = doc.user_id;
        req.connection.userId = (doc.user_id).toHexString();
        req.connection.authenticity_token = doc.authenticity_token;
        callback(null, true);

      } else callback(null, false);
    });

  });

};


/*

  Close (sign out)

  Imagine a man with a computer and a laptop logged on his account.
  If he signs out from his computer, he need to be still connected
  with his laptop connected in wifi, with an other ip address.

  Remove cookies and user_id from client's sockets.

*/

exports.close = function (ip) {

  var attributes = '; expires=Sat, 02 May 2009 00:00:00 GMT'
  var cookies = [
    'sid=' + attributes,
    'scode=' + attributes
  ];

  sockets.removeUID(ip);

  return cookies;

};
